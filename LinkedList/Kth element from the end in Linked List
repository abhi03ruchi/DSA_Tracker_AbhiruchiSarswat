class Node { 
    int data; 
    Node next; 

    Node(int d) { 
        data = d; 
        next = null; 
    } 
} 
public class printNthNodeFromEnd {
    //METHOD  (Using length of Linked List)
    public static int nodeFromEnd(Node head , int k){
        Node curr = head;
        int size=0;
        while(curr != null){
            curr = curr.next;
            size++;
        }
        if(size <k){
            return -1;
        }
        
        curr = head;
        for (int i = 1; i < size - k + 1; i++){
             curr = curr.next;
        }
        return curr.data;
    }
    // METHOD 2 (Using Two Pointers/References) 
    public static int nodeFromEnd2(Node head , int n){
        if(head == null){
            return -1;
        }
        Node first = head;
        int i =0;
        while (i<n){
            if(first == null){
                return -1;
            }
            first=first.next;
            i++;
        }
        Node second = head;
        while (first != null){
            second= second.next;
            first=first.next;
        }
        return second.data;
    }

    public static void main(String[] args) {
        Node head = new Node(10);
        head.next = new Node(20);
        head.next.next = new Node(30);
        int find= nodeFromEnd(head,2);
        System.out.println(find);
    }
}
